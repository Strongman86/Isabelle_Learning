theory exercise_2_3
  imports Main
begin
(*count the number of different elements*)
fun count::"'a\<Rightarrow>'a list\<Rightarrow>nat"
  where
"count x []=0"|
"count x (y # xs) =If(x=y)(Suc(count x xs))(count x xs)"(*if x==y,then the count++,else count unchange*)
value "count(1::nat) [1,1,2,3,1,3,1]"  
lemma count_e :"count x xs \<le> length xs"(*whether length is needed to define ??*)
apply(induction xs)
apply(auto)
done
end